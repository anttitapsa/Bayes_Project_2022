colSums(BF_20_less <= 0.05)
colSums(BF_80 <= 0.05)
colSums(BF_80_less <= 0.05)
colSums(BF_20 <= 0.05)
colSums(BF_20_less <= 0.05)
colSums(BH_80 <= 0.05)
colSums(BH_80_less <= 0.05)
colSums(BH_20 <= 0.05)
colSums(BH_20_less <= 0.05)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)), nrow=2)
library(ggplot2)
x <-seq(0,30,1)
obtain_x_heads <- data.frame(x, dbinom(x, size = 30, prob = 0.5)) #create data
colnames(obtain_x_heads) <- c("x", "y") #rename columns  in data
# plot the data
ggplot(obtain_x_heads, aes(x = x, y = y)) +
geom_line() + labs(title= " The probability to obtain different number
of heads in 30 coin flip",
x = "The Number of heads to obtain", y= "probability")
1 - pbinom(20, size=30, prob = 0.5)
pbinom(c(10,11), size = 30, prob = 0.5) # check if 10 or 11 heads is critical
pbinom(c(19,20), size = 30, prob = 0.5) # check if 19 or 20 heads is critical
# Create matrices for A and B
set.seed(0511)
A <- matrix(rnorm(n=800, mean = 0, sd = sqrt(3)), nrow = 100, ncol = 8)
B <- matrix(rnorm(n=800, mean = 0, sd = sqrt(3)), nrow = 100, ncol = 8)
p_values <- c()
for(i in 1:100){ # Do the t.test for each row of the matrices
p_values <- c(p_values, t.test(x = A[i,], y= B[i,], var.equal = TRUE )$p.value)
}
hist(p_values, breaks = 20)
p_values <- c()
for(i in 1:100){ # Do the t.test for each row of the matrices
p_values <- c(p_values, t.test(x = A[i,], y= B[i,], var.equal = TRUE )$p.value)
}
hist(p_values, breaks = 20)
Bonferroni <- function(p_values){ # Bonferroni correction
p <- p_values*length(p_values)
return(pmin(p, 1.0)) # Values are at most 1
}
Bonferroni_p_values <- Bonferroni(p_values)
hist(Bonferroni_p_values, breaks = 20, xlim = c(0,1))
Benjamini_Hochberg <- function(p_values){ #Benjamini-Hochberg correction
order <- order(p_values, decreasing = TRUE) #decreasing order
p_values <- p_values[order]
# calcultae first value i.e., largest value
q_k <- c(length(p_values)/length(p_values)*p_values[1])
for (i in 2:length(p_values)){ # loop goes the values from the biggest
# to tiniest
# calculate new value
new <- length(p_values)/(length(p_values)-i+1)*p_values[i]
# Check that new value is not bigger than previous value i.e., chechk that
# q_k increases when k increases
q_k <- c(q_k, min(q_k[i-1], new ))
}
q_k <- pmin(1, q_k) # values should be 1 at most
return(q_k[order(order)]) # original order
}
BH <- Benjamini_Hochberg(p_values)
hist(BH, breaks = 20, xlim= c(0,1))
A_80 = matrix(rnorm(n=640, mean= 0, sd = sqrt(3)), nrow=80, ncol = 8)
B_80 = matrix(rnorm(n=640, mean= 0, sd = sqrt(3)), nrow=80, ncol = 8)
A_20 = matrix(rnorm(n=160, mean= 0, sd = sqrt(3)), nrow=20, ncol = 8)
B_20 = matrix(rnorm(n=160, mean= 4, sd = sqrt(3)), nrow=20, ncol = 8)
p_values_80 <- c()
p_values_80_less <- c()
p_values_20 <- c()
p_values_20_less <- c()
# Calculate p values for all the rows
for(i in 1:80){
p_values_80 <- c(p_values_80, t.test(x = A_80[i,], y= B_80[i,],
var.equal = TRUE )$p.value)
p_values_80_less <- c(p_values_80_less, t.test(x = A_80[i,], y= B_80[i,],
var.equal = TRUE,
alternative = "l" )$p.value)
}
# Calculate p values for all the rows
for (i in 1:20){
p_values_20 <- c(p_values_20, t.test(x = A_20[i,], y= B_20[i,],
var.equal = TRUE )$p.value)
p_values_20_less <- c(p_values_20_less, t.test(x = A_20[i,], y= B_20[i,],
var.equal = TRUE,
alternative = "l" )$p.value)
}
BF_80 <- Bonferroni(p_values_80)
BF_80 <- as.data.frame(BF_80)
BF_80_less <- Bonferroni(p_values_80_less)
BF_80_less <- as.data.frame(BF_80_less)
BF_20 <- Bonferroni(p_values_20)
BF_20 <-  as.data.frame(BF_20)
BF_20_less <- Bonferroni(p_values_20_less)
BF_20_less <- as.data.frame(BF_20_less)
BH_80 <- Benjamini_Hochberg(p_values_80)
BH_80 <- as.data.frame(BH_80)
BH_80_less <- Benjamini_Hochberg(p_values_80_less)
BH_80_less <- as.data.frame(BH_80_less)
BH_20 <- Benjamini_Hochberg(p_values_20)
BH_20 <- as.data.frame(BH_20)
BH_20_less <- Benjamini_Hochberg(p_values_20_less)
BH_20_less <- as.data.frame(BH_20_less)
colSums(BF_80 <= 0.05)
colSums(BF_80_less <= 0.05)
colSums(BF_20 <= 0.05)
colSums(BF_20_less <= 0.05)
colSums(BH_80 <= 0.05)
colSums(BH_80_less <= 0.05)
colSums(BH_20 <= 0.05)
colSums(BH_20_less <= 0.05)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)), nrow=2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)), nrow=2) +
+ geom_vline(xintercept = 0.05, color = "red"),
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)) +
+ geom_vline(xintercept = 0.05, color = "red"), nrow = 2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81) + geom_vline(xintercept = 0.05,
color = "red")),
nrow=2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)), nrow=2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)) +geom_vline(xintercept = 0.05,
color = "red"),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)), nrow=2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)) +geom_vline(xintercept = 0.05,
color = "red"),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)) + geom_vline(xintercept = 0.05,
color = "red")
, nrow=2)
grid.arrange(ggplot(BF_20, aes(x=BF_20)) + geom_histogram(binwidth = 0.05,
bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,21))+ geom_vline(xintercept = 0.05,
color = "red"),
ggplot(BF_20_less, aes(x=BF_20_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_20, aes(x=BH_20)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21))+ geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_20_less, aes(x=BH_20_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21))+ geom_vline(xintercept = 0.05, color = "red"),
nrow = 2)
grid.arrange(ggplot(BF_20, aes(x=BF_20)) + geom_histogram(binwidth = 0.05,
bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,21))+ geom_vline(xintercept = 0.05,
color = "red"),
ggplot(BF_20_less, aes(x=BF_20_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_20, aes(x=BH_20)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21))+ geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_20_less, aes(x=BH_20_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1)) +
ylim(c(0,21))+ geom_vline(xintercept = 0.05, color = "red"),
nrow = 2)
library(gridExtra)
grid.arrange(ggplot(BF_80, aes(x=BF_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1)) + ylim(c(0,81)) +geom_vline(xintercept = 0.05,
color = "red"),
ggplot(BF_80_less, aes(x=BF_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) + xlim(c(-0.1,1.1))
+ ylim(c(0,81)) + geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80, aes(x=BH_80)) + geom_histogram(binwidth = 0.05,
bins = 20)
+ xlim(c(-0.1,1.1))  + ylim(c(0,81)) +
geom_vline(xintercept = 0.05, color = "red"),
ggplot(BH_80_less, aes(x=BH_80_less)) +
geom_histogram(binwidth = 0.05, bins = 20) +
xlim(c(-0.1,1.1)) + ylim(c(0,81)) + geom_vline(xintercept = 0.05,
color = "red")
, nrow=2)
library(aaltobda)
library(cmdstanr)
library(loo)
library(ggplot2)
set.seed(123)
data("factory")
mod_separate <- cmdstan_model(stan_file = "Factory_separate.stan")
mod_pooled <- cmdstan_model(stan_file = "Factory_pooled.stan")
mod_hierarchical <- cmdstan_model(stan_file = "Factory_hierarchical.stan")
data <- list(N = nrow(factory),
J = ncol(factory),
y = factory)
fit_separate <- mod_separate$sample(data=data, refresh=2000)
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_separate.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_pooled.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_hierarchical.stan")
mod_separate <- cmdstan_model(stan_file = "Factory_separate.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_separate.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_separate.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_pooled.stan")
rstan:::rstudio_stanc("Courses/BDA/submission/Factory_hierarchical.stan")
mod_separate <- cmdstan_model(stan_file = "Factory_separate.stan")
mod_pooled <- cmdstan_model(stan_file = "Factory_pooled.stan")
mod_hierarchical <- cmdstan_model(stan_file = "Factory_hierarchical.stan")
data <- list(N = nrow(factory),
J = ncol(factory),
y = factory)
fit_separate <- mod_separate$sample(data=data, refresh=2000)
fit_pooled <- mod_pooled$sample(data=data, refresh=2000)
fit_hierarchical <- mod_hierarchical$sample(data=data, refresh=2000)
log_lik_separate <- fit_separate$draws("log_lik")
r_eff_s <- relative_eff(exp(log_lik_separate), cores = 2)
loo_sep <- loo(log_lik_separate, r_eff = r_eff_s, cores = 2)
print(loo_sep)
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:6))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:nrow(factory)*ncol(factory)))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
separate
c(1:nrow(factory)*ncol(factory))
c(1:(nrow(factory)*ncol(factory)))
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
log_lik_pooled <- fit_pooled$draws("log_lik")
r_eff_p <- relative_eff(exp(log_lik_pooled), cores = 2)
loo_pooled <- loo(log_lik_separate, r_eff = r_eff_p, cores = 2)
print(loo_pooled)
pool <- data.frame(Patreon_K = c(loo_pooled$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(pool, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
log_lik_h <- fit_hierarchical$draws("log_lik")
r_eff_h <- relative_eff(exp(log_lik_h), cores = 2)
loo_h <- loo(log_lik_h, r_eff = r_eff_h, cores = 2)
print(loo_h)
hier <- data.frame(Patreon_K = c(loo_h$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(hier, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.3))
hier <- data.frame(Patreon_K = c(loo_h$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(hier, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(0,1.5))
hier
hier <- data.frame(Patreon_K = c(loo_h$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(hier, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(-0.2,1.5))
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(-0.2,1.3))
library(aaltobda)
library(cmdstanr)
library(loo)
library(ggplot2)
set.seed(123)
data("factory")
writeLines(readLines("Factory_separate.stan"))
writeLines(readLines("Factory_pooled.stan"))
writeLines(readLines("Factory_hierarchical.stan"))
mod_separate <- cmdstan_model(stan_file = "Factory_separate.stan")
mod_pooled <- cmdstan_model(stan_file = "Factory_pooled.stan")
mod_hierarchical <- cmdstan_model(stan_file = "Factory_hierarchical.stan")
data <- list(N = nrow(factory),
J = ncol(factory),
y = factory)
fit_separate <- mod_separate$sample(data=data, refresh=2000)
fit_pooled <- mod_pooled$sample(data=data, refresh=2000)
fit_hierarchical <- mod_hierarchical$sample(data=data, refresh=2000)
log_lik_separate <- fit_separate$draws("log_lik")
r_eff_s <- relative_eff(exp(log_lik_separate), cores = 2)
loo_sep <- loo(log_lik_separate, r_eff = r_eff_s, cores = 2)
print(loo_sep)
separate <- data.frame(Patreon_K = c(loo_sep$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(separate, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(-0.2,1.3))
log_lik_pooled <- fit_pooled$draws("log_lik")
r_eff_p <- relative_eff(exp(log_lik_pooled), cores = 2)
loo_pooled <- loo(log_lik_separate, r_eff = r_eff_p, cores = 2)
print(loo_pooled)
pool <- data.frame(Patreon_K = c(loo_pooled$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(pool, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(-0.2,1.3))
log_lik_h <- fit_hierarchical$draws("log_lik")
r_eff_h <- relative_eff(exp(log_lik_h), cores = 2)
loo_h <- loo(log_lik_h, r_eff = r_eff_h, cores = 2)
print(loo_h)
hier <- data.frame(Patreon_K = c(loo_h$diagnostics$pareto_k),
Left_out = c(1:(nrow(factory)*ncol(factory))))
ggplot(hier, aes(x = Left_out, y=Patreon_K)) + geom_point(color = "blue", shape = 3, size = 3) + geom_hline(yintercept=c(0.5, 0.7, 1), linetype="dashed", color = "red") + ylim (c(-0.2,1.5))
lppd_s <- sum(separate$Patreon_K)
lppd_s- 139.6
lppd_s
lppd_s <- log(1/length(separate$Patreon_K)*sum(separate$Patreon_K))
lppd_s- 139.6
lppd_s
lppd_s <- log(1/length(separate$Patreon_K)*sum(separate$Patreon_K))
lppd_s- (-139.6)
factory
S <- matrix(data = separate$Patreon_K, ncol= 6)
lppd_s <- sum(log(1/nrow(S)*rowSums(S)))
lppd_s- (-139.6)
S
log(1/nrow(S)*rowSums(S))
P <- matrix(data = separate$Patreon_K, ncol= 6)
lppd_p <- sum(log(1/nrow(P)*rowSums(P)))
lppd_p- (-139.7)
P <- matrix(data = pool$Patreon_K, ncol= 6)
lppd_p <- sum(log(1/nrow(P)*rowSums(P)))
lppd_p- (-139.7)
H <- matrix(data = hier$Patreon_K, ncol= 6)
lppd_h <- sum(log(1/nrow(H)*rowSums(H)))
lppd_h- (-130.4)
S <- matrix(data = separate$Patreon_K, ncol= 6)
lppd_s <- sum(log(1/nrow(S)*rowSums(S)))
lppd_s- (-139.6)
P <- matrix(data = pool$Patreon_K, ncol= 6)
lppd_p <- sum(log(1/nrow(P)*rowSums(P)))
lppd_p- (-139.7)
H <- matrix(data = hier$Patreon_K, ncol= 6)
lppd_h <- sum(log(1/nrow(H)*rowSums(H)))
lppd_h- (-130.4)
fit_separate$summary()
setwd("~/Courses/BDA/Bayes_project_2022/code")
library(Stat2Data)
data("FirstYearGPA")
library(cmdstanr)
library(Stat2Data)
data("FirstYearGPA")
?install_cmdstan()
install_cmdstan()
cmdstan_make_local(cpp_options = cmdstan_make_local(dir = "C:/Users/antti/Documents/.cmdstan/cmdstan-2.30.1"))
rebuild_cmdstan(cores = ...)
library(cmdstanr)
library(Stat2Data)
data("FirstYearGPA")
library(cmdstanr)
library(Stat2Data)
data("FirstYearGPA")
writeLines("hierarchical.stan")
writeLines("pooled.stan")
writeLines(readLines("hierarchical.stan"))
writeLines(readLines("pooled.stan"))
rstan:::rstudio_stanc("pooled.stan")
setwd("~/Courses/BDA/Bayes_project_2022/doc")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/pooled.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/pooled.stan")
male_white[["GPA"]]
male_white <- FirstYearGPA[FirstYearGPA$Male==1 & FirstYearGPA$White==1,]
male_non_white <- FirstYearGPA[FirstYearGPA$Male==1 & FirstYearGPA$White==0,]
female_white <- FirstYearGPA[FirstYearGPA$Male==0 & FirstYearGPA$White==1,]
female_non_white <- FirstYearGPA[FirstYearGPA$Male==0 & FirstYearGPA$White==0,]
male_white[["GPA"]]
nrow(male_white)
subset(male_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS'))
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/pooled.stan")
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/pooled.stan")
set.seed(123)
library(cmdstanr)
library(Stat2Data)
data("FirstYearGPA")
male_white <- FirstYearGPA[FirstYearGPA$Male==1 & FirstYearGPA$White==1,]
male_non_white <- FirstYearGPA[FirstYearGPA$Male==1 & FirstYearGPA$White==0,]
female_white <- FirstYearGPA[FirstYearGPA$Male==0 & FirstYearGPA$White==1,]
female_non_white <- FirstYearGPA[FirstYearGPA$Male==0 & FirstYearGPA$White==0,]
data_hierarchical <- list(c(N1 = nrow(male_white),
N2 = nrow(male_non_white),
N3 = nrow(female_white),
N4 = nrow(female_non_white),
x1 = subset(male_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x2 = subset(male_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x3 = subset(female_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x4 = subset(female_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
y1 = male_white$GPA,
y2 = male_non_white$GPA,
y3 = female_white$GPA,
y4 = female_non_white$GPA))
mod_pooled <- cmdstan_model("pooled.stan")
mod_hierarchical <- cmdstan_model("hierarchical.stan")
mod_hierarchical <- cmdstan_model("hierarchical.stan")
fit_hierarchical <-mod_hierarchical$sample(data_hierarchical, refresh = 2000)
rstan:::rstudio_stanc("~/Courses/BDA/Bayes_project_2022/code/hierarchical.stan")
mod_hierarchical <- cmdstan_model("hierarchical.stan")
fit_hierarchical <-mod_hierarchical$sample(data_hierarchical, refresh = 2000)
data_hierarchical
data_hierarchical <- list(N1 = nrow(male_white),
N2 = nrow(male_non_white),
N3 = nrow(female_white),
N4 = nrow(female_non_white),
x1 = subset(male_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x2 = subset(male_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x3 = subset(female_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x4 = subset(female_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
y1 = male_white$GPA,
y2 = male_non_white$GPA,
y3 = female_white$GPA,
y4 = female_non_white$GPA)
data_hierarchical
data_hierarchical <- list(N1 = nrow(male_white),
N2 = nrow(male_non_white),
N3 = nrow(female_white),
N4 = nrow(female_non_white),
x1 = subset(male_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x2 = subset(male_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x3 = subset(female_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
x4 = subset(female_non_white, select = c('HSGPA', 'SATV', 'SATM','HU','SS')),
y1 = male_white$GPA,
y2 = male_non_white$GPA,
y3 = female_white$GPA,
y4 = female_non_white$GPA)
fit_hierarchical <-mod_hierarchical$sample(data_hierarchical, refresh = 2000)
